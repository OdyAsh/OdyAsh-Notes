/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LatexMatrices
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  latexMatricesSettings: "default"
};
var LatexMatrices = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-matrix-modal",
      name: "Create new matrix",
      editorCallback: (editor) => {
        new MatrixModal(this.app, editor).open();
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MatrixModal = class extends import_obsidian.Modal {
  constructor(app, editor) {
    super(app);
    this.editor = editor;
  }
  onOpen() {
    const { contentEl } = this;
    let bracketLeftChar = "";
    let bracketRightChar = "";
    let myapp = this.app;
    contentEl.createEl("h2", {
      text: "Create new matrix",
      cls: "matrixHeader"
    });
    const widthInput = contentEl.createEl("input", {
      type: "Number",
      placeholder: "Insert width",
      cls: "matrixInput"
    });
    const heightInput = contentEl.createEl("input", {
      type: "Number",
      placeholder: "Insert height",
      cls: "matrixInput"
    });
    const bracketsInput = contentEl.createEl("select", {
      type: "select",
      cls: "matrixInput"
    });
    const placeholderBracket = contentEl.createEl("option", {
      text: "Select brackets",
      value: " "
    });
    const noBrackets = contentEl.createEl("option", {
      text: "None Brackets",
      value: "N"
    });
    const roundBracket = contentEl.createEl("option", {
      text: "Round Brackets",
      value: "R"
    });
    const squareBrackets = contentEl.createEl("option", {
      text: "Square Brackets",
      value: "S"
    });
    const curlyBracket = contentEl.createEl("option", {
      text: "Curly Brackets",
      value: "C"
    });
    const br = contentEl.createEl("br");
    contentEl.appendChild(widthInput);
    contentEl.appendChild(heightInput);
    contentEl.appendChild(bracketsInput);
    bracketsInput.appendChild(placeholderBracket);
    bracketsInput.appendChild(noBrackets);
    bracketsInput.appendChild(roundBracket);
    bracketsInput.appendChild(squareBrackets);
    bracketsInput.appendChild(curlyBracket);
    contentEl.appendChild(br);
    const generateBtn = contentEl.createEl("button", {
      text: "Generate matrix",
      cls: "genBtn"
    });
    const errorPar = contentEl.createEl("p", {
      text: "Please, set the height, the width and the type of brackets you wish to use.",
      cls: "disabled"
    });
    contentEl.appendChild(generateBtn);
    contentEl.appendChild(errorPar);
    generateBtn.addEventListener("click", generateMatrix);
    bracketsInput.addEventListener("change", onChangeBrackets);
    contentEl.appendChild(br);
    let matrixDiv = contentEl.createEl("div", {
      cls: "matrixDiv"
    });
    contentEl.appendChild(matrixDiv);
    function onChangeBrackets() {
      switch (bracketsInput.value) {
        case "R":
          bracketLeftChar = "(";
          bracketRightChar = ")";
          break;
        case "N":
          bracketLeftChar = " ";
          bracketRightChar = " ";
          break;
        case "S":
          bracketLeftChar = "[";
          bracketRightChar = "]";
          break;
        case "C":
          bracketLeftChar = "\\{";
          bracketRightChar = "\\}";
          break;
        default:
          bracketLeftChar = "(";
          bracketRightChar = ")";
          break;
      }
    }
    function generateMatrix() {
      let mDiv = document.getElementsByClassName("matrixDiv")[0];
      mDiv.innerHTML = "";
      if (Number(widthInput.value) < 1 || Number(heightInput.value) < 1 || bracketsInput.value == " ") {
        errorPar.classList.add("error");
        errorPar.classList.remove("disabled");
        return;
      }
      errorPar.classList.add("disabled");
      errorPar.classList.remove("error");
      for (let i = 0; i < Number(heightInput.value); i++) {
        let innerMatrixDiv = contentEl.createEl("div", {
          cls: "innerMatrixDiv"
        });
        for (let j = 0; j < Number(widthInput.value); j++) {
          let cell = contentEl.createEl("input", {
            attr: { id: `matrix${i}${j}` },
            type: "text",
            cls: "matrixElement"
          });
          innerMatrixDiv.appendChild(cell);
        }
        mDiv.append(innerMatrixDiv);
      }
      let createBtn = contentEl.createEl("button", {
        text: "Write latex",
        cls: "genBtn"
      });
      mDiv.appendChild(createBtn);
      createBtn.addEventListener("click", outputLatex);
    }
    function outputLatex() {
      var _a;
      let matriceFinale = "";
      if (bracketsInput.value != "N") {
        matriceFinale += `\\left${bracketLeftChar}\\begin{matrix} `;
      } else {
        matriceFinale += `\\begin{matrix} `;
      }
      for (let i = 0; i < Number(heightInput.value); i++) {
        for (let j = 0; j < Number(widthInput.value); j++) {
          let cell = document.getElementById(
            `matrix${i}${j}`
          );
          if (cell != null) {
            if (cell.value.includes("/")) {
              let arr = cell.value.split("/");
              matriceFinale += `\\frac{${arr[0]}}{${arr[1]}}`;
            } else {
              matriceFinale += cell.value;
            }
          }
          if (j != Number(widthInput.value) - 1) {
            matriceFinale += " & ";
          }
        }
        if (i != Number(heightInput.value) - 1)
          matriceFinale += " \\\\ ";
      }
      if (bracketsInput.value != "N") {
        matriceFinale += `\\end{matrix} \\right${bracketRightChar}`;
      } else {
        matriceFinale += `\\end{matrix}`;
      }
      ;
      let editor = (_a = myapp.workspace.activeEditor) == null ? void 0 : _a.editor;
      editor == null ? void 0 : editor.replaceRange(matriceFinale, editor.getCursor());
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
